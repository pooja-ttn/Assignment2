ASSIGNMENT- For all exercises the complete project should be your submission (excluding the .gradle, .idea, build folders).
Add a single file "details.txt" alongwith submissions and add your explanation of what you did for the exercises - any docs, URLs that you referenced so others can understand.


Q1) Look up java plugin documentation. Make changes in manifest to make it executable with correct class.
    
When run using java -jar JAR_NAME_HERE the output should be text "Hello World" on the console.
    
    Ans)
    
    apply from:"java"
    
    
    sourceSets {
        main {
            java {
                srcDirs = ['src/main/java']
            }
        }
    
    }
    jar{
        manifest{
            attributes "Main-Class": "com.intelligrape.gradle.Application"
    
        }
        
    }
    
    Application.java-
    
    package com.intelligrape.gradle;
    
    public class Application {
        public static void main(String[] args) {
            System.out.println("Hello World");
        }
    }



Q2) look up idea plugin. make changes in build.gradle so that the sources of src/main/java as well as src/main/java2 are taken as sources. Ensure that when you make JAR file class files in both are added to the JAR. This will teach you how projects with non-conventional structure can be used with gradle.


Ans)

Create Application2.java in src/main/java2 and set the source-

 sourceSets {
    main {
        java {
            srcDirs = ['src/main/java','src/main/java2']
        }
    }
}




Gradle1.jar-




Q3)
 Add 2 files file1.xml and file1.txt in src/main/resources manually. make changes so that when creating jar only file1.xml is added to the jar. 

Ans)

Add file1.txt and file2.xml in src/main/resources and add resources in sourceSets. And exclude  ‘file1.txt’.









Q4) Find how to what is an uberjar. Make changes so you can use commons lang3 StringUtil in your jar. Make this uber jar executable. The output should be text but that should be using the StringUtils class of commons lang3

Ans) 
 A fat jar (also known as uber-jar) is a self-sufficient archive which contains both classes    and dependencies needed to run an application.
To add the plugins-
repositories{
    maven { url "https://repo.maven.apache.org/maven2" }}
dependencies{
    compile group: 'org.apache.commons', name: 'commons-lang3', version: '3.8.1'
}





Q5) Find a maven repository and add it as a repository. You can use bintray, jcenter.
Ans) 
To add the maven repository ,use mavenCentral
repositories{
mavenCentral()
jcenter()
maven { 
url "https://repo.maven.apache.org/maven2" }

 }

dependencies{
    compile group: 'org.apache.commons', name: 'commons-lang3', version: '3.8.1'
}
}


Q6) Write a task in file "mytasks.gradle" and use it in your build.gradle
Ans) Use this in build.gradle-
apply from:"mytasks.gradle"



